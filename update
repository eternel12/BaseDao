// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract VotingSystem {

    // Structure reprÃ©sentant un candidat
    struct Candidate {
        string name;
        uint voteCount;
    }

    address public owner;
    mapping(address => bool) public voters;
    Candidate[] public candidates;

    constructor(string[] memory candidateNames) {
        owner = msg.sender;
        for (uint i = 0; i < candidateNames.length; i++) {
            candidates.push(Candidate(candidateNames[i], 0));
        }
    }

    // Voter pour un candidat par son index
    function vote(uint candidateIndex) public {
        require(!voters[msg.sender], "\u00C3\u00A9 vous avez d\u00E9j\u00E0 vot\u025B");
        require(candidateIndex < candidates.length, "Candidat invalide");

        voters[msg.sender] = true;
        candidates[candidateIndex].voteCount++;
    }

    // Voir le nombre de votes d'un candidat
    function getVotes(uint candidateIndex) public view returns (uint) {
        require(candidateIndex < candidates.length, "Candidat invalide");
        return candidates[candidateIndex].voteCount;
    }

    // Voir le gagnant
    function getWinner() public view returns (string memory) {
        uint maxVotes = 0;
        string memory winner;
        for (uint i = 0; i < candidates.length; i++) {
            if (candidates[i].voteCount > maxVotes) {
                maxVotes = candidates[i].voteCount;
                winner = candidates[i].name;
            }
        }
        return winner;
    }
}
